version: 2.1
executors:
  ubuntu:
    machine:
      image: ubuntu-2204:current

jobs:
  build:
    executor: ubuntu
    resource_class: arm.medium
    environment:
      PREBOOTSTRAP_ARCH: arm64
      PREBOOTSTRAP_QEMU_ARCH: aarch64
      #PREBOOTSTRAP_ARCH: amd64
      #PREBOOTSTRAP_QEMU_ARCH: x86_64
      PREBOOTSTRAP_RELEASE: bookworm
    steps:
      - checkout
      - run:
          command: |
            sudo apt-get update -y -q
            sudo apt-get install -y -q curl gnupg debootstrap qemu-user-static
          name: Installing build dependencies
      - run:
          command: |
            sudo rm -rf rootfs
            mkdir rootfs
          name: Creating rootfs folder
      - run:
          command: |
            sudo bash -c "debootstrap --verbose --variant=minbase --foreign --arch="${PREBOOTSTRAP_ARCH}" \
              --include=sudo,locales,git,openssh-client,gnupg,apt-transport-https,wget,ca-certificates,less,curl,bash-completion,vim,\
            man-db,socat,gcc-12-base,iputils-ping,dos2unix,psmisc,rsync,iproute2,apt-utils,kmod \
            "${PREBOOTSTRAP_RELEASE}" ./rootfs/"
          name: Using debootstrap to create rootfs
      - run:
          command: |
            # shellcheck disable=SC2164
            cd rootfs
      
            sudo mkdir -p sys
            sudo mkdir -p proc
            sudo mkdir -p dev/pts
      
            sudo mount --rbind /dev dev/
            sudo mount --bind /sys sys/
            sudo mount --bind /proc proc/
          name: Entering chroot to mount dev, sys, proc and dev/pts

      - run:
          command: |
            sudo cp /usr/bin/qemu-"${PREBOOTSTRAP_QEMU_ARCH}"-static rootfs/usr/bin/
          name: Copy static QEMU to rootfs

      - run:
          command: |
            sudo chmod +x rootfs/usr/bin/qemu-${PREBOOTSTRAP_QEMU_ARCH}-static
          name: Marking static [rootfs/usr/bin/qemu-${PREBOOTSTRAP_QEMU_ARCH}-static] as executable

      - run:
          command: |
            sudo chroot rootfs/ /bin/bash -c "/debootstrap/debootstrap --second-stage --verbose"
          name: Manually setting up debootstrap

      - run:
          command:  |
            sudo cp linux_files/profile rootfs/etc/profile
            sudo chmod 644 rootfs/etc/profile
          name: 'Installing default profile'

      - run:
          command:  |
            sudo cp linux_files/setup rootfs/etc/setup
          name: 'Installing Pengwin bootstrap script'

      - run:
          command:  |
            sudo chroot rootfs/ /bin/bash -c "bash /etc/setup --silent --install --debug"
          name: 'Running Pengwin bootstrap script'

      - run:
          command: |
            sudo chroot rootfs/ /bin/bash -c "echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && locale-gen"
            sudo chroot rootfs/ /bin/bash -c "update-locale LANGUAGE=en_US.UTF-8 LC_ALL=C"
          name: 'Configuring language settings'

      - run:
          command: |
            sudo chroot rootfs/ apt-get update
            sudo chroot rootfs/ /bin/bash -c "yes 'N' | apt-get -y -q dist-upgrade"
            sudo chroot rootfs/ apt-get -y -q install xclip gnome-themes-extra gtk2-engines-murrine dbus dbus-x11 mesa-utils libqt5core5a binutils libnss3 libegl1-mesa mesa-libgallium mesa-vdpau-drivers mesa-va-drivers vainfo nano
            sudo chroot rootfs/ strip --remove-section=.note.ABI-tag /usr/lib/${PREBOOTSTRAP_QEMU_ARCH}-linux-gnu/libQt5Core.so.5
          name: 'Installing additional packages'

      - run:
          command: |
            sudo chroot rootfs/ apt-get -y -q autoremove
            sudo chroot rootfs/ apt-get -y -q autoclean
            sudo chroot rootfs/ apt-get -y -q clean
          name: 'Clean up apt cache'

      - run:
          command: |
            sudo chroot rootfs/ /bin/bash -c "echo 'source /etc/vim/vimrc' > /etc/skel/.vimrc"
            sudo chroot rootfs/ /bin/bash -c "echo 'syntax on' >> /etc/skel/.vimrc"
            sudo chroot rootfs/ /bin/bash -c "echo 'set background=dark' >> /etc/skel/.vimrc"
            sudo chroot rootfs/ /bin/bash -c "echo 'set visualbell' >> /etc/skel/.vimrc"
            sudo chroot rootfs/ /bin/bash -c "echo 'set noerrorbells' >> /etc/skel/.vimrc"
            sudo chroot rootfs/ /bin/bash -c "echo '\$include /etc/inputrc' > /etc/skel/.inputrc"
            sudo chroot rootfs/ /bin/bash -c "echo 'set bell-style none' >> /etc/skel/.inputrc"
            sudo chroot rootfs/ /bin/bash -c "echo 'set show-all-if-ambiguous on' >> /etc/skel/.inputrc"
            sudo chroot rootfs/ /bin/bash -c "echo 'set show-all-if-unmodified on' >> /etc/skel/.inputrc"
          name: 'Add defaults for readline and vim'

      - run:
          command: |
            sudo rm rootfs/usr/bin/qemu-${PREBOOTSTRAP_QEMU_ARCH}-static
          name: Deleting QEMU from chroot

      - run:
          command: |
            mkdir /tmp/artifacts
            cd rootfs && sudo tar -zcvf /tmp/artifacts/install_${PREBOOTSTRAP_ARCH}_rootfs.tar.gz --exclude proc --exclude dev --exclude sys --exclude='boot/*' ./*
          name: 'Compressing rootfs'

      - store_artifacts:
          path: /tmp/artifacts

      - run:
          command: |
            sudo cp /usr/bin/qemu-${PREBOOTSTRAP_QEMU_ARCH}-static rootfs/usr/bin/
          name: Copy static QEMU to rootfs

      - run:
          command: |
            sudo chmod +x rootfs/usr/bin/qemu-${PREBOOTSTRAP_QEMU_ARCH}-static
          name: Marking static [rootfs/usr/bin/qemu-${PREBOOTSTRAP_QEMU_ARCH}-static] as executable

      - run:
          command: |
            cd rootfs
      
            sudo mount --rbind /dev dev/
            sudo mount --bind /sys sys/
            sudo mount --bind /proc proc/

            cd ..
            
            sudo chroot rootfs/ /bin/bash -c "git clone https://github.com/WhitewaterFoundry/pengwin-setup.git"
            sudo chroot rootfs/ /bin/bash -c "cp -r pengwin-setup/tests /usr/local/bin/ && chmod -R +x /usr/local/bin/tests"
            sudo chroot rootfs/ /bin/bash -c "cd /usr/local/bin/tests && source ./install_shunit2.sh && ./run_tests.sh"
          name: Run unit tests

      - store_test_results:
          path: rootfs/usr/local/bin/tests/results

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              only: master
