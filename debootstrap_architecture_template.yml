jobs:
- job: startAgent
  variables:
    AWS_INSTANCE_ID: ${{ parameters.aws_instance_id }}
  condition: ne(variables['AWS_INSTANCE_ID'], '')
  pool:
    vmImage: ubuntu-latest

  steps:

    - task: DownloadSecureFile@1
      name: awsCredentials
      inputs:
        secureFile: 'credentials'

    - task: DownloadSecureFile@1
      name: awsConfig
      inputs:
        secureFile: 'config'

    - script: |
        mkdir -p "${HOME}/.aws"
        cp "$(awsCredentials.secureFilePath)" "${HOME}/.aws/credentials"
        cp "$(awsConfig.secureFilePath)" "${HOME}/.aws/config"
      displayName: 'Copy credentials'

    - script: |
        aws ec2 start-instances --instance-ids $(AWS_INSTANCE_ID)
      displayName: 'Start instance'

- job: ${{ parameters.arch }}
  ${{ if ne(parameters.aws_instance_id, '') }}:
    dependsOn: [ startAgent ]
  pool:
    ${{ if ne(parameters.pool_name, '') }}:
      name: ${{ parameters.pool_name }}
    ${{ if ne(parameters.pool_vmImage, '') }}:
      vmImage: ${{ parameters.pool_vmImage }}
  variables:
    PREBOOTSTRAP_ARCH: ${{ parameters.arch }}
    PREBOOTSTRAP_QEMU_ARCH: ${{ parameters.qemu_arch }}
    PREBOOTSTRAP_RELEASE: bookworm
    AWS_INSTANCE_ID: ${{ parameters.aws_instance_id }}
  steps:
  - script: |
      sudo apt-get update -y -q
      sudo apt-get install -y -q curl gnupg debootstrap qemu-user-static
    displayName: 'Installing build dependencies'

  - script: |
      sudo rm -rf rootfs
      mkdir rootfs
    displayName: 'Creating rootfs folder'

  - script: |
      sudo bash -c "debootstrap --verbose --variant=minbase --foreign --arch=$(PREBOOTSTRAP_ARCH) \
        --include=sudo,locales,git,openssh-client,gnupg,apt-transport-https,wget,ca-certificates,less,curl,bash-completion,vim,\
      man-db,socat,gcc-12-base,iputils-ping,dos2unix,psmisc,rsync,iproute2,apt-utils \
      $(PREBOOTSTRAP_RELEASE) ./rootfs/"

    displayName: 'Using debootstrap to create rootfs'

  - script: |
      # shellcheck disable=SC2164
      cd rootfs

      sudo mkdir -p sys
      sudo mkdir -p proc
      sudo mkdir -p dev/pts

      sudo mount --bind /dev dev/
      sudo mount --bind /sys sys/
      sudo mount --bind /proc proc/
      sudo mount --bind /dev/pts dev/pts/
    displayName: 'Entering chroot to mount dev, sys, proc and dev/pts'

  - script: |
      sudo cp /usr/bin/qemu-"$(PREBOOTSTRAP_QEMU_ARCH)"-static rootfs/usr/bin/
    displayName: Copy static QEMU to rootfs

  - script: |
      sudo chmod +x rootfs/usr/bin/qemu-$(PREBOOTSTRAP_QEMU_ARCH)-static
    displayName: Marking static [rootfs/usr/bin/qemu-$(PREBOOTSTRAP_QEMU_ARCH)-static] as executable

  - script: |
      sudo chroot rootfs/ /bin/bash -c "/debootstrap/debootstrap --second-stage --verbose"
    displayName: Manually setting up debootstrap

  - script:  |
      sudo cp linux_files/profile rootfs/etc/profile
      sudo chmod 644 rootfs/etc/profile
    displayName: 'Installing default profile'

  - script:  |
      sudo cp linux_files/setup rootfs/etc/setup
    displayName: 'Installing Pengwin bootstrap script'

  - script:  |
      sudo chroot rootfs/ /bin/bash -c "bash /etc/setup --silent --install --debug"
    displayName: 'Running Pengwin bootstrap script'

  - script: |
      sudo chroot rootfs/ /bin/bash -c "echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && locale-gen"
      sudo chroot rootfs/ /bin/bash -c "update-locale LANGUAGE=en_US.UTF-8 LC_ALL=C"
    displayName: 'Configuring language settings'

  - script: |
      sudo chroot rootfs/ /bin/bash -c "echo 'Defaults lecture_file = /etc/sudoers.lecture' >> /etc/sudoers"
      sudo chroot rootfs/ /bin/bash -c "echo 'Enter your UNIX password below. This is not your Windows password.' > /etc/sudoers.lecture"
    displayName: 'Configuring sudo message'

  - script: |
      sudo chroot rootfs/ apt-get update
      sudo chroot rootfs/ /bin/bash -c "yes 'N' | apt-get -y -q dist-upgrade"
      sudo chroot rootfs/ apt-get -y -q install xclip gnome-themes-extra gtk2-engines-murrine dbus dbus-x11 mesa-utils libqt5core5a binutils libnss3 libegl1-mesa mesa-libgallium mesa-vdpau-drivers mesa-va-drivers vainfo nano
      sudo chroot rootfs/ strip --remove-section=.note.ABI-tag /usr/lib/$(PREBOOTSTRAP_QEMU_ARCH)-linux-gnu/libQt5Core.so.5
    displayName: 'Installing additional packages'

  - script: |
      sudo chroot rootfs/ apt-get -y -q autoremove
      sudo chroot rootfs/ apt-get -y -q autoclean
      sudo chroot rootfs/ apt-get -y -q clean
    displayName: 'Clean up apt cache'

  - script: |
      sudo chroot rootfs/ /bin/bash -c "echo 'source /etc/vim/vimrc' > /etc/skel/.vimrc"
      sudo chroot rootfs/ /bin/bash -c "echo 'syntax on' >> /etc/skel/.vimrc"
      sudo chroot rootfs/ /bin/bash -c "echo 'set background=dark' >> /etc/skel/.vimrc"
      sudo chroot rootfs/ /bin/bash -c "echo 'set visualbell' >> /etc/skel/.vimrc"
      sudo chroot rootfs/ /bin/bash -c "echo 'set noerrorbells' >> /etc/skel/.vimrc"
      sudo chroot rootfs/ /bin/bash -c "echo '\$include /etc/inputrc' > /etc/skel/.inputrc"
      sudo chroot rootfs/ /bin/bash -c "echo 'set bell-style none' >> /etc/skel/.inputrc"
      sudo chroot rootfs/ /bin/bash -c "echo 'set show-all-if-ambiguous on' >> /etc/skel/.inputrc"
      sudo chroot rootfs/ /bin/bash -c "echo 'set show-all-if-unmodified on' >> /etc/skel/.inputrc"
    displayName: 'Add defaults for readline and vim'

  - script: |
      sudo rm rootfs/usr/bin/qemu-$(PREBOOTSTRAP_QEMU_ARCH)-static
    displayName: Deleting QEMU from chroot

  - script: |
      cd rootfs && sudo tar -zcvf $(Build.ArtifactStagingDirectory)/install_$(PREBOOTSTRAP_ARCH)_rootfs.tar.gz --exclude proc --exclude dev --exclude sys --exclude='boot/*' ./*
    displayName: 'Compressing rootfs'

  - script: |
      sudo cp /usr/bin/qemu-$(PREBOOTSTRAP_QEMU_ARCH)-static rootfs/usr/bin/
    displayName: Copy static QEMU to rootfs

  - script: |
      sudo chmod +x rootfs/usr/bin/qemu-$(PREBOOTSTRAP_QEMU_ARCH)-static
    displayName: Marking static [rootfs/usr/bin/qemu-$(PREBOOTSTRAP_QEMU_ARCH)-static] as executable

  - script: |
      cd rootfs

      sudo mkdir -p sys
      sudo mkdir -p proc
      sudo mkdir -p dev/pts

      sudo mount --bind /dev dev/
      sudo mount --bind /sys sys/
      sudo mount --bind /proc proc/
      sudo mount --bind /dev/pts dev/pts/
      cd ..
    condition: ne('${{ parameters.pool_vmImage }}', '')
    displayName: 'Entering chroot to mount dev, sys, proc and dev/pts'

  - script: |
      sudo chroot rootfs/ /bin/bash -c "git clone https://github.com/WhitewaterFoundry/pengwin-setup.git"
      sudo chroot rootfs/ /bin/bash -c "cd pengwin-setup && git checkout development && cd -"
      sudo chroot rootfs/ /bin/bash -c "cp -r pengwin-setup/tests /usr/local/bin/ && chmod -R +x /usr/local/bin/tests"
      sudo chroot rootfs/ /bin/bash -c "cd /usr/local/bin/tests && source ./install_shunit2.sh && ./run_tests.sh"

    displayName: Run unit tests

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'rootfs/usr/local/bin/tests/results/*.xml'

  - task: PublishBuildArtifacts@1

  - script: |
      sudo shutdown -r 1

    displayName: Clean up



